import request from 'supertest';
import app from '../src/server.js';
import { pool } from '../src/config/database.js';

describe('Server API Tests', () => {
  // Close database connection after all tests
  afterAll(async () => {
    await pool.end();
  });

  // Basic server health check
  describe('GET /', () => {
    test('should return welcome message', async () => {
      const response = await request(app).get('/');
      expect(response.status).toBe(200);
      expect(response.text).toBe('Server is running and working fine!');
    });
  });

  // API endpoint checks
  describe('API Routes', () => {
    test('should respond to user API', async () => {
      const response = await request(app).get('/api/v1/users/');
      expect(response.status).toBe(200);
      expect(response.text).toBe('User API, welcome!');
    });

    test('should respond to cart API', async () => {
      const response = await request(app).get('/api/v1/cart/');
      expect(response.status).toBe(200);
      expect(response.text).toBe('Cart API, welcome!');
    });

    test('should respond to address API', async () => {
      const response = await request(app).get('/api/v1/address/');
      expect(response.status).toBe(200);
      expect(response.text).toBe('Address API, welcome!');
    });

    test('should respond to delivery API', async () => {
      const response = await request(app).get('/api/v1/delivery/');
      expect(response.status).toBe(200);
      expect(response.text).toBe('Delivery API, welcome!');
    });
  });

  // Error handling
  describe('Error Handling', () => {
    test('should handle non-existent routes', async () => {
      const response = await request(app).get('/non-existent-route');
      expect(response.status).toBe(404);
      expect(response.text).toBe('Route does not exist');
    });
  });
});